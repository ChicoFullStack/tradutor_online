# nginx.conf

# Define o número de processos de trabalho. 'auto' é geralmente uma boa escolha.
worker_processes auto;

events {
    # Define o número máximo de ligações simultâneas por processo de trabalho.
    worker_connections 1024;
}

http {
    # Inclui tipos MIME para que o navegador saiba como lidar com diferentes ficheiros.
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Configuração do servidor principal que escuta na porta 80.
    server {
        listen 80;
        # CORREÇÃO: Atualizado para o domínio correto.
        server_name boloko.cloud; 

        # Redireciona todo o tráfego HTTP para HTTPS para maior segurança.
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # Configuração do servidor para HTTPS
    server {
        listen 443 ssl;
        # CORREÇÃO: Atualizado para o domínio correto.
        server_name boloko.cloud; 

        # Caminhos para os seus certificados SSL.
        # Certifique-se de que o caminho corresponde ao seu domínio.
        ssl_certificate /etc/letsencrypt/live/boloko.cloud/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/boloko.cloud/privkey.pem;

        # Configuração para servir a aplicação frontend (Next.js)
        location / {
            # 'frontend:3000' refere-se ao serviço 'frontend' definido no docker-compose.yml
            proxy_pass http://frontend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Configuração para reencaminhar as ligações WebSocket para o backend
        location /ws/ {
            # 'backend:8000' refere-se ao serviço 'backend' definido no docker-compose.yml
            proxy_pass http://backend:8000/ws/;
            
            # Cabeçalhos essenciais para permitir o "upgrade" da ligação de HTTP para WebSocket
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
        }
    }
}
